{"version":3,"sources":["reducers/cache.js","reducers/index.js","store/index.js","async-component.js","router/routes.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["userData","combineReducers","cache","state","arguments","length","undefined","action","type","data","initialState","async_component","getComponent","_class","_temp","_React$Component","AsyncComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","Component","inherits","createClass","key","value","_this2","_ref","default","setState","_react_16_8_6_react_default","a","createElement","props","React","Home","load","Promise","all","__webpack_require__","e","then","bind","Detail","router_routes","path","component","Errors","asyncComponent","RouteWithSubRoutes","route","react_router","render","assign","routes","router","RouteMap","context","name","react_router_dom","className","map","i","router_RouteWithSubRoutes","exact","store","createStore","reducers","src_App","es","Boolean","window","ReactDOM","document","navigator","registration"],"mappings":"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","file":"static/js/main.c9d5a2e4.chunk.js","sourcesContent":["const userData = {}\n\nexport default function user (state = userData, action) {\n\tswitch (action.type) {\n\t\tcase 'update_user':\n\t\t\treturn state = action.data\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import {combineReducers} from 'redux'\nimport cache from './cache.js'\n\nexport default combineReducers({\n\tcache\n})","import {createStore} from 'redux'\nimport rootReducer from '../reducers/index'\n\n// const tiger = 1000\n\n// // 定义action\n\n// const increase = {\n// \ttype: '涨工资'\n// }\n// const decrease = {\n// \ttype: '扣工资'\n// }\n\n// const reducer = (state = tiger, action) => {\n// \tswitch (action.type) {\n// \t\tcase '涨工资':\n// \t\t\treturn state += 100\n// \t\t\tbreak;\n// \t\tcase '扣工资':\n// \t\t\treturn state -= 100\n// \t\t\tbreak;\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// }\n\n// const store = createStore(reducer)\n\n// store.subscribe(() => {\n// \tconsole.log(store.getState())\n// })\n\n// store.dispatch(increase)\n// store.dispatch(decrease)\n\nexport default function configureStore(initialState) {\n\tconst store = createStore(rootReducer, initialState)\n\treturn store\n}","// async component loader\nimport React from 'react'\n\nexport default getComponent => {\n\treturn class AsyncComponent extends React.Component {\n\t\tstatic Component = null\n\t\tstate = {\n\t\t\tComponent: AsyncComponent.Component\n\t\t}\n\n\t\tcomponentWillMount() {\n\t\t\tif (!this.state.Component) {\n\t\t\t\tgetComponent().then(({default: Component}) => {\n\t\t\t\t\tAsyncComponent.Component = Component\n\t\t\t\t\tthis.setState({Component})\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\trender() {\n\t\t\tconst { Component } = this.state\n\t\t\tif (Component) {\n\t\t\t\treturn <Component {...this.props}/>\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\t}\n}","import {default as load} from '../async-component.js'\n\nconst Home = load(() => import('../page/home/index.js'))\nconst Detail = load(() => import('../page/detail/index.js'))\nconst Protocol = load(() => import('../page/protocol/index.js'))\nconst Animate = load(() => import('../page/demo/animate.js'))\nconst Trans = load(() => import('../page/demo/transition.js'))\nconst CssTransition = load(() => import('../page/demo/css-transition.js'))\n\nconst routes = [\n\t{\n\t\tpath: '/',\n\t\tcomponent: Home\n\t}, {\n\t\tpath: '/page-ms/:id?',\n\t\tcomponent: Protocol\n\t}, {\n\t\tpath: '/detail/:id?',\n\t\tcomponent: Detail\n\t}, {\n\t\tpath: '/animate',\n\t\tcomponent: Animate\n\t}, {\n\t\tpath: '/transition',\n\t\tcomponent: Trans\n\t}, {\n\t\tpath: '/css-transition',\n\t\tcomponent: CssTransition\n\t}\n]\n\nexport default routes","import React from 'react'\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tSwitch\n} from 'react-router-dom'\n// import {default as Home} from '../page/home/index.js'\nimport asyncComponent from '../async-component.js'\nimport routes from './routes.js'\nconst Errors = asyncComponent(() => import('../page/error'))\nconst RouteWithSubRoutes = (route) => (\n\t<Route path={route.path} render={props => (\n\t\t<route.component {...props} routes={route.routes}/>\n\t)}/>\n)\n\nclass RouteMap extends React.Component{\n\tconstructor(props, context) {\n\t\tsuper(props, context)\n\t\tthis.state = {\n\t\t\tname: '测试'\n\t\t}\n\t}\n\tcomponentDidMount() {}\n\trender() {\n\t\t\t\t\t// <Route exact path='/' component={Home}/>\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className='router-wrapper'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troutes.map((route, i) => (\n\t\t\t\t\t\t\t\t<RouteWithSubRoutes exact key={i} {...route}/>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t<Route component={Errors}/>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t)\n\t}\n}\n\nexport default RouteMap","import React, {Component} from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\nimport RouteMap from './router/index.js'\nimport './style/index.scss'\n\nconst store = configureStore()\n\nclass App extends Component{\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<RouteMap/>\n\t\t\t</Provider>\n\t\t)\n\t}\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './style/antd-theme.scss'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}