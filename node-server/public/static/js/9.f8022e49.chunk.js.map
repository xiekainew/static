{"version":3,"sources":["../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/CSSTransition.js","../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/utils/ChildMapping.js","../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/TransitionGroup.js","../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/TransitionGroupContext.js","../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/config.js","../node_modules/_react-transition-group@4.2.1@react-transition-group/esm/Transition.js","../node_modules/_dom-helpers@3.4.0@dom-helpers/class/addClass.js","../node_modules/_@babel_runtime@7.5.2@@babel/runtime/helpers/interopRequireDefault.js","../node_modules/_dom-helpers@3.4.0@dom-helpers/class/hasClass.js","../node_modules/_dom-helpers@3.4.0@dom-helpers/class/removeClass.js","../node_modules/_@babel_runtime@7.5.2@@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/_@babel_runtime@7.5.2@@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/_@babel_runtime@7.5.2@@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/_@babel_runtime@7.5.2@@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__","dom_helpers_class_addClass__WEBPACK_IMPORTED_MODULE_4__","dom_helpers_class_addClass__WEBPACK_IMPORTED_MODULE_4___default","n","dom_helpers_class_removeClass__WEBPACK_IMPORTED_MODULE_5__","dom_helpers_class_removeClass__WEBPACK_IMPORTED_MODULE_5___default","react__WEBPACK_IMPORTED_MODULE_6__","react__WEBPACK_IMPORTED_MODULE_6___default","_Transition__WEBPACK_IMPORTED_MODULE_7__","removeClass","node","classes","split","forEach","c","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","appearing","removeClasses","addClass","props","onEntering","type","onEntered","onExit","onExiting","onExited","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","Object","_proto","prototype","phase","className","scrollTop","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","a","createElement","Component","defaultProps","propTypes","__webpack_exports__","getChildMapping","children","mapFn","result","create","_react_16_8_6_react","map","child","key","mapper","getProp","prop","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","in","bind","values","obj","k","TransitionGroup_TransitionGroup","TransitionGroup","context","handleExited","assertThisInitialized","state","contextValue","isMounting","firstRender","inheritsLoose","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","_ref","currentChildMapping","esm_extends","component","childFactory","objectWithoutPropertiesLoose","_react_16_8_6_react_default","TransitionGroupContext","Provider","value","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","createContext","config","UNMOUNTED","EXITED","ENTERING","ENTERED","Transition_Transition","Transition","initialStatus","appearStatus","unmountOnExit","mountOnEnter","status","nextCallback","prevState","updateStatus","componentDidUpdate","prevProps","nextStatus","cancelNextCallback","getTimeouts","timeout","undefined","mounting","_react_dom_16_8_6_react_dom_default","findDOMNode","performEnter","performExit","_this2","timeouts","enterTimeout","safeSetState","onTransitionEnd","_this3","cancel","nextState","callback","setNextCallback","_this4","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","childProps","Children","only","cloneElement","noop","contextType","EXITING","_interopRequireDefault","exports","__esModule","default","element","classList","add","_hasClass","setAttribute","baseVal","module","contains","indexOf","replaceClassName","origClass","classToRemove","replace","RegExp","remove","_slicedToArray","arr","isArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","Symbol","iterator","err","iterableToArrayLimit","TypeError","nonIterableRest","d"],"mappings":"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","file":"static/js/9.f8022e49.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/class/addClass';\nimport removeOneClass from 'dom-helpers/class/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\n * using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**.\n */\n\n\nvar CSSTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (node, appearing) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node, appearing);\n      }\n    };\n\n    _this.onEntering = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node, appearing);\n      }\n    };\n\n    _this.onEntered = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(node, appearing);\n      }\n    };\n\n    _this.onExit = function (node) {\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.onExiting = function (node) {\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(node);\n      }\n    };\n\n    _this.onExited = function (node) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    if (type === 'appear' && phase === 'done') {\n      className += \" \" + this.getClassNames('enter').doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    this.appliedClasses[type][phase] = className;\n\n    _addClass(node, className);\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it enters, exits or\n   * has finished the transition. A single name can be provided and it will be\n   * suffixed for each stage: e.g.\n   *\n   * `classNames=\"fade\"` applies `fade-enter`, `fade-enter-active`,\n   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,\n   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.\n   *\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\n   * This allows you to define different behavior for when appearing is done and\n   * when regular entering is done, using selectors like\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\n   * epic entrance animation when element first appears in the DOM using\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   * simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n  /**\n   * The `<TransitionGroup>` component manages a set of transition components\n   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n   * components, `<TransitionGroup>` is a state machine for managing the mounting\n   * and unmounting of components over time.\n   *\n   * Consider the example below. As items are removed or added to the TodoList the\n   * `in` prop is toggled automatically by the `<TransitionGroup>`.\n   *\n   * Note that `<TransitionGroup>`  does not define any animation behavior!\n   * Exactly _how_ a list item animates is up to the individual transition\n   * component. This means you can mix and match animations across different list\n   * items.\n   */\n\n};\n\nvar TransitionGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","import React from 'react';\nexport default React.createContext(null);","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps.in;\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.\n   * If you want to transition on the first mount set `appear` to `true`, and the\n   * component will transition in as soon as the `<Transition>` mounts.\n   *\n   * > Note: there are no specific \"appear\" states. `appear` only adds an additional `enter` transition.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = addClass;\n\nvar _hasClass = _interopRequireDefault(require(\"./hasClass\"));\n\nfunction addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);\n}\n\nmodule.exports = exports[\"default\"];","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = hasClass;\n\nfunction hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);else return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}\n\nmodule.exports = exports[\"default\"];","'use strict';\n\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp('(^|\\\\s)' + classToRemove + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n\nmodule.exports = function removeClass(element, className) {\n  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}"],"sourceRoot":""}